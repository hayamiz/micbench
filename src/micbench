#!/usr/bin/env ruby

require 'optparse'

ENV['MICBENCH'] = "yes"

$procs = `cat /sys/devices/system/cpu/cpu*/topology/physical_package_id|sort|uniq|wc -l`.to_i
$logicores = `grep 'processor' /proc/cpuinfo|sort|uniq|wc -l`.to_i
$physcores_per_proc = `grep 'core id' /proc/cpuinfo|sort|uniq|wc -l`.to_i
$logicores_per_proc = $logicores / $procs
$nodes = `numactl --hardware|grep available`.split[1].to_i

class BaseCommand
  class << self
    attr_accessor :description

    def commands
      @@commands
    end

    @@commands = {}
    def command_name(name = nil, desc = nil)
      if name.nil?
        @command_name
      else
        @@commands[name] = self
        @command_name = name
        if ! desc.nil?
          @description = desc
        end
      end
    end

    def dispatch(argv)
      if argv.empty? || argv.first =~ /\A(-h|--help)\Z/
        cmd_class = HelpCommand
      else
        cmd = argv.shift
        unless @@commands[cmd]
          $stderr.puts("No such command: #{cmd}")
          exit(false)
        end
        cmd_class = @@commands[cmd]
      end
      cmd = cmd_class.new()
      cmd.invoke(argv)
    end
  end

  def initialize()
    @options = {}
    @parser = OptionParser.new
    @parser.banner = "Usage: #{File.basename($0, '.*')} #{self.command_name} [options]"
    self.init_option_parser()
  end

  def command_name
    self.class.command_name
  end

  def print_help
    puts @parser.help
  end

  def init_option_parser()
    raise NotImplementedError.new("#{self.class}##{__method__} is not implemented.")
  end

  def check_option()
    raise NotImplementedError.new("#{self.class}##{__method__} is not implemented.")
  end

  def invoke(argv)
    argv = @parser.parse(argv)
    self.check_option()
    self.do_cmd(argv)
  end

  def do_cmd(argv)
    raise NotImplementedError.new("#{self.class}##{__method__} is not implemented.")
  end
end

class HelpCommand < BaseCommand
  command_name "help", "'help \x1b[4mcommand\x1b[0m' explains about \x1b[4mcommand\x1b[0m"

  def init_option_parser()
    cmd_name_maxlen = 0
    cmd_list = BaseCommand.commands.values.sort_by do |cmd_class|
      cmd_name_maxlen = [cmd_name_maxlen, cmd_class.command_name.size].max
      cmd_class.command_name
    end.map do |cmd_class|
      sprintf("  %#{cmd_name_maxlen}s : %s",
              cmd_class.command_name,
              cmd_class.description || "no description")
    end.join("\n")
    @parser.banner =  <<EOS
Usage: #{File.basename($0, '.*')} \x1b[4mcommand\x1b[0m [options]

available commands:
#{cmd_list}

EOS
  end

  def check_option()
  end

  def do_cmd(argv)
    if ! argv.empty? && BaseCommand.commands[argv[0]]
      BaseCommand.commands[argv[0]].new().print_help
    else
      puts @parser.help
    end
    exit(true)
  end
end

class MemoryCommand < BaseCommand
  command_name "mem", "memory latency and bandwidth benchmark"

  def init_option_parser()
    @options[:multi] = 1
    @options[:timeout] = 10
    @options[:mode] = :seq
    @options[:local] = false
    @options[:affinity] = {}
    @options[:size] = 2 ** 20
    @options[:hugetlbfile] = nil
    @options[:hugepagesize] = 2 * 2**20
    @options[:verbose] = false
    @options[:debug] = false

    parse_error = lambda do |*msg|
      if msg.size > 0
        msg.each do |m|
          $stderr.puts("#{$0}: #{m}")
        end
      end
      puts @parser.help
      exit(false)
    end

    @parser.on('-h', '--help', "Show help") do
      puts @parser.help
      exit(true)
    end
    @parser.on('-m', '--multi NUM', Integer,
              "Multiplicity of memory access (default: #{@options[:multi]})") do |num|
      @options[:multi] = num
    end
    @parser.on('-t', '--timeout NUM',
              "Running time of memory access test (in sec) (default: #{@options[:timeout]}sec)") do |num|
      if num =~ /\A\d+\Z/
        @options[:timeout] = num.to_i
      else
        parse_error.call("--timeout requires positive integer.")
      end
    end
    @parser.on('-S', '--seq',
              "Sequential memory access mode (default mode)") do
      @options[:mode] = :seq
    end
    @parser.on('-R', '--rand',
              "Random memory access mode (default: sequential access mode)") do
      @options[:mode] = :rand
    end
    @parser.on('-L', '--local',
              "Allocate separated memory region for each thread (default: sharing one region)") do
      @options[:local] = true
    end
    @parser.on('-a', '--affinity AFFINITY', "CPU and memory utilization policy") do |affinity|
      @options[:affinity] = @options[:affinity].merge(parse_affinity(affinity))
    end
    @parser.on('-s', '--size SIZE', "Size of memory region (default: 1MB)") do |size|
      unless @options[:size] = parse_size(size)
        parse_error.call("invalid argument for --size: #{size}")
      end
    end
    @parser.on('-H', '--hugetlbfile PATH', "Use HugePages if specified. Give a path to file on hugetlbfs.") do |path|
      # TODO: more strict check
      @options[:hugetlbfile] = path
    end
    @parser.on('-z', '--hugepagesize SIZE', "Size of HugePage (default: 2MB)") do |size|
      # TODO: more strict check
      unless @options[:hugepagesize] = parse_size(size)
        parse_error.call("invalid argument for --hugepagesize: #{size}")
      end
    end
    @parser.on('-v', '--verbose') do
      @options[:verbose] = true
    end
    @parser.on('--debug') do
      @options[:debug] = true
    end
  end

  def check_option()
    @options[:affinity] = @options[:affinity].select do |tid,entry|
      tid < @options[:multi]
    end.map do |tid, entry|
      cpuset = entry[0]
      mnodeset = entry[1]
      max_cpuid = cpuset.max
      max_mnodeid = mnodeset.max
      cpu_bitmap = (0..[max_cpuid, $logicores - 1].min).map{|cpuid| cpuset.include?(cpuid) ? "1" : "0"}.join("")
      mnode_bitmap = (0..[max_mnodeid, $nodes - 1].min).map{|nodeid| mnodeset.include?(nodeid) ? "1" : "0"}.join("")
      "#{tid}:#{cpu_bitmap}:#{mnode_bitmap}"
    end
  end

  def do_cmd(argv)
    if ! argv.empty?
      $stderr.puts("Following arguments are ignored: #{argv.join(' ')}")
    end
    real_command = File.join(File.dirname(__FILE__), "micbench-mem")
    real_command_str = [real_command,
                        "-m", @options[:multi],
                        "-t", @options[:timeout],
                        (@options[:mode] == :rand ? "-R" : "-S"),
                        (@options[:local] ? "-L" : []),
                        "-s", @options[:size],
                        (@options[:hugetlbfile] ? ["-H", @options[:hugetlbfile]] : []),
                        "-z", @options[:hugepagesize],
                        (@options[:verbose] ? "-v" : []),
                        @options[:affinity].map{|aff| ["-a", aff]}].flatten.join(" ")

    if ENV['MB_DEBUG'] || @options[:debug]
      puts real_command_str
    end
    if ENV['MB_LEAKCHECK']
      real_command_str = "valgrind --leak-check=full " + real_command_str
    end
    exec(real_command_str)
  end
end

class LockCommand < BaseCommand
  command_name "lock", "lock and sync. cost benchmark"

  def init_option_parser()
    @options[:multi] = 1
    @options[:mode] = "spinlock"
    @options[:affinity] = {}
    @options[:count] = 1000000
    @options[:critical_job_size] = 10
    @options[:noncritical_job_size] = 1000
    @options[:verbose] = false
    @options[:debug] = false

    parse_error = lambda do |*msg|
      if msg.size > 0
        msg.each do |m|
          $stderr.puts("#{$0}: #{m}")
        end
      end
      puts @parser.help
      exit(false)
    end

    @parser.on('-h', '--help', "Show help") do
      puts @parser.help
      exit(true)
    end
    @parser.on('-m', '--multi NUM', Integer,
              "Multiplicity of memory access (default: #{@options[:multi]})") do |num|
      @options[:multi] = num
    end
    available_modes = ["spinlock", "mutex"]
    @parser.on('-M', '--mode MODE', "Benchmark mode (available: #{available_modes.join(', ')})") do |mode|
      unless available_modes.include?(mode)
        parse_error.call("Invalid mode: #{mode}")
      end
      @options[:mode] = mode
    end
    @parser.on('-c', '--count NUM',
              "# of operations to be performed (default: #{@options[:count]}sec)") do |num|
      if num =~ /\A\d+\Z/
        @options[:count] = num.to_i
      else
        parse_error.call("--count requires positive integer.")
      end
    end
    @parser.on('-C', '--critical COUNT',
               "# of operations in a critical section (default: #{@options[:critical_job_size]})") do |num|
      if num =~ /\A\d+\Z/
        @options[:critical_job_size] = num.to_i
      else
        parse_error.call("--critical requires positive integer.")
      end
    end
    @parser.on('-N', '--non-critical COUNT',
               "# of operations outside of a critical section (default: #{@options[:noncritical_job_size]})") do |num|
      if num =~ /\A\d+\Z/
        @options[:noncritical_job_size] = num.to_i
      else
        parse_error.call("--non-critical requires positive integer.")
      end
    end
    @parser.on('-a', '--affinity AFFINITY', "CPU and memory utilization policy") do |affinity|
      @options[:affinity] = @options[:affinity].merge(parse_affinity(affinity))
    end
    @parser.on('-v', '--verbose') do
      @options[:verbose] = true
    end
    @parser.on('--debug') do
      @options[:debug] = true
    end
  end

  def check_option()
    @options[:affinity] = @options[:affinity].select do |tid,entry|
      tid < @options[:multi]
    end.map do |tid, entry|
      cpuset = entry[0]
      mnodeset = entry[1]
      max_cpuid = cpuset.max
      max_mnodeid = mnodeset.max
      cpu_bitmap = (0..[max_cpuid, $logicores - 1].min).map{|cpuid| cpuset.include?(cpuid) ? "1" : "0"}.join("")
      mnode_bitmap = (0..[max_mnodeid, $nodes - 1].min).map{|nodeid| mnodeset.include?(nodeid) ? "1" : "0"}.join("")
      "#{tid}:#{cpu_bitmap}:#{mnode_bitmap}"
    end
  end

  def do_cmd(argv)
    if ! argv.empty?
      $stderr.puts("Following arguments are ignored: #{argv.join(' ')}")
    end
    real_command = File.join(File.dirname(__FILE__), "micbench-lock")
    real_command_str = [real_command,
                        "-m", @options[:multi],
                        "-M", @options[:mode],
                        "-C", @options[:critical_job_size],
                        "-N", @options[:noncritical_job_size],
                        "-c", @options[:count],
                        (@options[:verbose] ? "-v" : []),
                        @options[:affinity].map{|aff| ["-a", aff]}].flatten.join(" ")

    if ENV['MB_DEBUG'] || @options[:debug]
      puts real_command_str
    end
    if ENV['MB_LEAKCHECK']
      real_command_str = "valgrind --leak-check=full " + real_command_str
    end
    exec(real_command_str)
  end
end

class IoCommand < BaseCommand
  command_name "io", "IO benchmark on block devices and files"

  def init_option_parser()
    @options[:noop] = false
    @options[:multi] = 1
    @options[:affinity] = {}
    @options[:timeout] = 60
    @options[:mode] = :read
    @options[:pattern] = :seq
    @options[:direct] = false
    @options[:blocksize] = 16 * 1024
    @options[:offset_start] = 0
    @options[:offset_end] = 0
    @options[:misalign] = 0
    @options[:verbose] = false
    @options[:debug] = false

    @parser.banner = "Usage: #{File.basename($0, '.*')} #{self.command_name} [options] device_or_file"

    parse_error = lambda do |*msg|
      if msg.size > 0
        msg.each do |m|
          $stderr.puts("#{$0}: #{m}")
        end
      end
      puts @parser.help
      exit(false)
    end

    @parser.on('-N', '--noop',
              "Dry-run if this option is specified.") do
      @options[:noop] = true
    end
    @parser.on('-m', '--multi NUM', Integer,
              "The number of IO threads (default: 1)") do |num|
      @options[:multi] = num
    end
    @parser.on('-a', '--affinity AFFINITY',
              "CPU and memory affinity setting") do |affinity|
      @options[:affinity] = @options[:affinity].merge(parse_affinity(affinity))
    end
    @parser.on('-t', '--timeout NUM',
              "Running time of IO test (in sec) (default: 60sec)") do |num|
      if num =~ /\A\d+\Z/
        @options[:timeout] = num.to_i
      else
        parse_error.call("--timeout requires positive integer.")
      end
    end
    @parser.on('-W', '--write',
              "Write operation (default: read operation)") do
      @options[:mode] = :write
    end
    @parser.on('-S', '--seq',
              "Sequential access mode (default mode)") do
      @options[:pattern] = :seq
    end
    @parser.on('-R', '--rand',
              "Random access mode (default: sequential access mode)") do
      @options[:pattern] = :rand
    end
    @parser.on('-d', '--direct',
              "Use O_DIRECT (default: no). If this flag is specified, block size must be multiples of block size of devices.") do
      @options[:direct] = true
    end
    @parser.on('-b', '--blocksize SIZE',
              "Size of IO block (default: 16k)") do |size|
      unless @options[:blocksize] = parse_size(size)
        parse_error.call("invalid argument for --size: #{size}")
      end
    end
    @parser.on('-s', '--offset-start OFFSET',
              "Offset (in blocks) to start with (default: 0)") do |offset|
      if offset =~ /\A\d+\Z/
        @options[:offset_start] = offset.to_i
      else
        parse_error.call("--offset-start requires 0 or positive integer.")
      end
    end
    @parser.on('-e', '--offset-end OFFSET',
              "Offset (in blocks) to end with (default: the size of device)") do |offset|
      if offset =~ /\A\d+\Z/
        @options[:offset_end] = offset.to_i
      else
        parse_error.call("--offset-end requires 0 or positive integer.")
      end
    end
    @parser.on('-z', '--misalign OFFSET',
              "Misalignment from current position (in byte) (default: 0)") do |offset|
      if offset =~ /\A\d+\Z/
        @options[:misalign] = offset.to_i
      else
        parse_error.call("--misalign requires 0 or positive integer.")
      end
    end
    @parser.on('-v', '--verbose') do
      @options[:verbose] = true
    end
    @parser.on('--debug') do
      @options[:debug] = true
    end
  end

  def check_option
    @options[:affinity] = @options[:affinity].select do |tid,entry|
      tid < @options[:multi]
    end.map do |tid, entry|
      cpuset = entry[0]
      mnodeset = entry[1]
      p mnodeset
      max_cpuid = cpuset.max
      max_mnodeid = mnodeset.max
      cpu_bitmap = (0..[max_cpuid, $logicores - 1].min).map{|cpuid| cpuset.include?(cpuid) ? "1" : "0"}.join("")
      mnode_bitmap = (0..[max_mnodeid, $nodes - 1].min).map{|nodeid| mnodeset.include?(nodeid) ? "1" : "0"}.join("")
      "#{tid}:#{cpu_bitmap}:#{mnode_bitmap}"
    end
  end

  def do_cmd(argv)
    if argv.empty?
      $stderr.puts("device or file must be specified.")
      puts @parser.help
      exit(false)
    else
      device_or_file = argv.shift
    end

    if ! argv.empty?
      $stderr.puts("Following arguments are ignored: #{argv.join(' ')}")
    end

    real_command = File.join(File.dirname(__FILE__), "micbench-io")
    real_command_str = [real_command,
                        (@options[:noop] ? "-N" : []),
                        "-m", @options[:multi],
                        @options[:affinity].map{|aff| ["-a", aff]},
                        "-t", @options[:timeout],
                        (@options[:pattern] == :rand ? "-R" : "-S"),
                        (@options[:direct] ? "-d" : []),
                        (@options[:mode] == :write ? "-W" : []),
                        "-b", @options[:blocksize],
                        "-s", @options[:offset_start],
                        "-e", @options[:offset_end],
                        "-z", @options[:misalign],
                        (@options[:verbose] ? "-v" : []),
                        device_or_file].flatten.join(" ")

    if ENV['MB_DEBUG'] || @options[:debug]
      puts real_command_str
    end
    if ENV['MB_LEAKCHECK']
      real_command_str = "valgrind --leak-check=full " + real_command_str
    end
    exec(real_command_str)
  end
end

def print_usage()
  print <<EOS
Usage: #{$0} \x1b[4mcommand\x1b[0m [options]
EOS
end

def parse_size(sz_str)
  if sz_str =~ /\A(\d+)([kKmMgG]?)[bB]?\Z/
    size = $~[1].to_i
    sz_prefix = $~[2]
    case sz_prefix
    when /\A[kK]\Z/
      size *= 1024
    when /\A[mM]\Z/
      size *= 1024 * 1024
    when /\A[gG]\Z/
      size *= 1024 * 1024 * 1024
    end

    size
  else
    nil
  end
end


#
# Format of affinity description
#
# <affinity> := <entry> ['+' <affinity>]
# <entry> := <threads> ':' <CPU_assignment> [':' <mem_assignment>]
# <threads> := <thread_ids> [',' <threads>]
# <thread_ids> := <thread_id> ['-' <thread_id>]
# <CPU_assignment> := <unit_ids> [',' <CPU_assignment>]
# <unit_ids> := <core_ids> | <node_ids>
# <core_ids> := 'c' <core_id> ['-' <core_ids>]
# <node_ids> := 'n' <node_id> ['-' <node_ids>]
# <mem_assignment> := <node_ids> [',' <mem_assignment>]
#

# parse affinity description and return a Hash:
#   key  : THREAD_ID (Integer)
#   value: [Array of CPU_ID (Integer)] or [Array of CPU_ID (Integer), Array of MEMORY_NODE_ID (Integer)]

def parse_affinity(aff_str)
  def parse_threads(threads_str)
    unless threads_str =~ /\A\d+(-\d+)?(,\d+(-\d+)?)*\Z/
      raise ArgumentError.new("Invalid threads: #{threads_str}")
    end
    threads_str.split(",").map do |thread_ids_str|
      parse_ids(thread_ids_str)
    end.flatten.sort.uniq
  end

  def parse_cpu_assignment(cpu_str)
    if cpu_str.nil?
      return (0..($logicores - 1)).to_a
    end
    unless cpu_str =~ /\A([cn]\d+(?:-\d+)?)(,[cn]\d+(?:-\d+)?)*\Z/
      raise ArgumentError.new("Invalid cpu assignment: #{cpu_str}")
    end
    cpu_str.split(",").map do |unit_str|
      if unit_str[0..0] == "c"
        parse_ids(unit_str, "c")
      elsif unit_str[0..0] == "n"
        node_ids = parse_ids(unit_str, "n")
        if node_ids.is_a? Integer
          node_ids = [node_ids]
        end
        node_ids.map do |node_id|
          cpuid = $logicores_per_proc * node_id
          (cpuid..(cpuid + $logicores_per_proc - 1)).to_a
        end.flatten.sort.uniq
      end
    end.flatten.sort.uniq
  end

  def parse_mem_assignment(mem_str)
    if mem_str.nil?
      return (0..($nodes - 1)).to_a
    end
    unless mem_str =~ /\A\d+(-\d+)?(,\d+(-\d+)?)*\Z/
      raise ArgumentError.new("Invalid memory assignment: #{mem_str}")
    end
    mem_str.split(",").map do |mem_ids|
      parse_ids(mem_ids)
    end.flatten.sort.uniq
  end

  def parse_ids(ids_str, prefix = '')
    unless prefix.size == 0 || Regexp.compile("^" + Regexp.quote(prefix)) =~ ids_str
      raise ArgumentError.new("Invalid ids: #{ids_str}")
    end
    unless ids_str =~ /\A#{Regexp.quote(prefix)}\d+(-\d+)?\Z/
      raise ArgumentError.new("Invalid ids: #{ids_str}")
    end
    if prefix.size > 0
      ids_str = ids_str[(prefix.size)..(ids_str.size - 1)]
    end
    id1, id2 = ids_str.split("-")
    id1 = id1.to_i
    if id2.nil?
      id1
    else
      id2 = id2.to_i
      if id2 < id1
        tmp = id2
        id1 = id2
        id2 = tmp
      end
      (id1..id2).to_a
    end
  end

  thread_masks = Hash.new

  aff_str.split('+').each do |entry|
    threads, *rest = entry.split(":")
    if rest.size < 1 || rest.size > 2
      raise ArgumentError.new("Invalid affinity description: #{aff_str}")
    end
    cpu_assign, mem_assign = *rest

    thread_id_set = parse_threads(threads)
    cpu_id_set = parse_cpu_assignment(cpu_assign)
    memnode_id_set = parse_mem_assignment(mem_assign)

    thread_id_set.each do |tid|
      thread_masks[tid] = [cpu_id_set, memnode_id_set]
    end
  end

  thread_masks
end

def main(argv)
  BaseCommand.dispatch(argv)
end

if __FILE__ == $0
  main(ARGV.dup)
end
